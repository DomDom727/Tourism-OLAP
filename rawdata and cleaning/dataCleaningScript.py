# -*- coding: utf-8 -*-
"""STADVDBCleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u7hrEHRo58JzM-3sPePyttOuOYnilb5t
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import glob
import os

columns = ['country', 'year', 'total_arrivals', 'arrivals_personal', 'arrivals_business']
df = pd.DataFrame(columns = columns)

raw_df = pd.read_excel('UN_Tourism_inbound_arrivals_by_purpose_11_2023.xlsx', sheet_name="Inbound Tourism-Purpose", skiprows=2)
raw_df = raw_df.rename(columns={'Basic data and indicators': 'country', 'Unnamed: 6': 'Type'})
raw_df['country'] = raw_df['country'].ffill()
raw_df = raw_df[raw_df['Unnamed: 4'].isna()]  # we only want data rows (Total, Personal, Business)
year_cols = [col for col in raw_df.columns if isinstance(col, (int, float)) or str(col).isdigit()]


df_melted = raw_df.melt(
    id_vars=['country', 'Type'],
    value_vars=year_cols,
    var_name='year',
    value_name='arrivals'
)

df_pivot = df_melted.pivot_table(
    index=['country', 'year'],
    columns='Type',
    values='arrivals',
    aggfunc='first'
).reset_index()

df_pivot.rename(columns={
    'Personal': 'arrivals_personal',
    'Business and professional': 'arrivals_business'
}, inplace=True)

df_pivot['year'] = df_pivot['year'].astype(int)
for col in ['arrivals_personal', 'arrivals_business']:
    df_pivot[col] = pd.to_numeric(df_pivot[col], errors='coerce')

df = pd.concat([df, df_pivot], ignore_index=True)

df['total_arrivals'] = df['arrivals_personal'] + df['arrivals_business']

df_exp = pd.read_excel('UN_Tourism_inbound_expenditure_11_2023.xlsx', sheet_name="Inbound Tourism-Expenditure", skiprows=2)
df_exp = df_exp.rename(columns={'Basic data and indicators': 'country'})
df_exp['country'] = df_exp['country'].ffill()

df_exp = df_exp[df_exp['Unnamed: 5'] == 'Travel']

year_cols = [col for col in df_exp.columns if isinstance(col, (int, float)) or str(col).isdigit()]

df_exp_melted = df_exp.melt(
    id_vars=['country'],
    value_vars=year_cols,
    var_name='year',
    value_name='tourism_expenditure'
)

df_exp_melted['year'] = pd.to_numeric(df_exp_melted['year'], errors='coerce').astype('Int64')
df_exp_melted['tourism_expenditure'] = pd.to_numeric(df_exp_melted['tourism_expenditure'], errors='coerce')
df_exp_melted.dropna(subset=['tourism_expenditure'], inplace=True)

df = df.merge(df_exp_melted, on=['country', 'year'], how='left')

df_dep = pd.read_excel('UN_Tourism_outbound_departures_11_2023.xlsx', sheet_name="Outbound Tourism-Departures", skiprows=2)

df_dep = df_dep.rename(columns={'Basic data and indicators': 'country'})
df_dep['country'] = df_dep['country'].ffill()
df_dep = df_dep[df_dep['Unnamed: 6'].isna()]

year_cols = [col for col in df_dep.columns if isinstance(col, (int, float)) or str(col).isdigit()]

df_dep_melted = df_dep.melt(
    id_vars=['country'],
    value_vars=year_cols,
    var_name='year',
    value_name='total_departures'
)

df_dep_melted['year'] = pd.to_numeric(df_dep_melted['year'], errors='coerce').astype('Int64')
df_dep_melted['total_departures'] = pd.to_numeric(df_dep_melted['total_departures'], errors='coerce')
df_dep_melted.dropna(subset=['total_departures'], inplace=True)

df = df.merge(df_dep_melted, on=['country', 'year'], how='left')

df.to_csv("tourism_data.csv", index=False)

## Weather Normals

df_raw = pd.read_csv("tempMin.csv")
df_raw.columns = df_raw.columns.str.strip()
month_cols = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
df_subset = df_raw[['Country'] + month_cols]

df_melted = df_subset.melt(
    id_vars=['Country'],
    value_vars=month_cols,
    var_name='month',
    value_name='min_temp'
)

df_melted.rename(columns={'Country': 'country'}, inplace=True)


df_melted['min_temp'] = df_melted['min_temp'].replace(-99.9, pd.NA)

weather_df = (
    df_melted
    .groupby(['country', 'month'], as_index=False)['min_temp']
    .mean()
)

df_raw = pd.read_csv("tempAvg.csv")
df_raw.columns = df_raw.columns.str.strip()
month_cols = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
df_subset = df_raw[['Country'] + month_cols]

df_melted = df_subset.melt(
    id_vars=['Country'],
    value_vars=month_cols,
    var_name='month',
    value_name='mean_temp'
)

df_melted.rename(columns={'Country': 'country'}, inplace=True)


df_melted['mean_temp'] = df_melted['mean_temp'].replace(-99.9, pd.NA)

avg_df = (
    df_melted
    .groupby(['country', 'month'], as_index=False)['mean_temp']
    .mean()
)

weather_df = weather_df.merge(avg_df, on=['country', 'month'], how='left')

df_raw = pd.read_csv("tempMax.csv")
df_raw.columns = df_raw.columns.str.strip()
month_cols = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
df_subset = df_raw[['Country'] + month_cols]

df_melted = df_subset.melt(
    id_vars=['Country'],
    value_vars=month_cols,
    var_name='month',
    value_name='max_temp'
)

df_melted.rename(columns={'Country': 'country'}, inplace=True)


df_melted['max_temp'] = df_melted['max_temp'].replace(-99.9, pd.NA)

avg_df = (
    df_melted
    .groupby(['country', 'month'], as_index=False)['max_temp']
    .mean()
)

weather_df = weather_df.merge(avg_df, on=['country', 'month'], how='left')

df_raw = pd.read_csv("precipitation.csv")
df_raw.columns = df_raw.columns.str.strip()
month_cols = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
df_subset = df_raw[['Country'] + month_cols]

df_melted = df_subset.melt(
    id_vars=['Country'],
    value_vars=month_cols,
    var_name='month',
    value_name='precipitation'
)

df_melted.rename(columns={'Country': 'country'}, inplace=True)


df_melted['precipitation'] = df_melted['precipitation'].replace(-99.9, pd.NA)

avg_df = (
    df_melted
    .groupby(['country', 'month'], as_index=False)['precipitation']
    .mean()
)

weather_df = weather_df.merge(avg_df, on=['country', 'month'], how='left')

df_raw = pd.read_csv("hoursOfSunshine.csv")
df_raw.columns = df_raw.columns.str.strip()
month_cols = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
df_subset = df_raw[['Country'] + month_cols]

df_melted = df_subset.melt(
    id_vars=['Country'],
    value_vars=month_cols,
    var_name='month',
    value_name='hours_of_sunshine'
)

df_melted.rename(columns={'Country': 'country'}, inplace=True)


df_melted['hours_of_sunshine'] = df_melted['hours_of_sunshine'].replace(-99.9, pd.NA)

avg_df = (
    df_melted
    .groupby(['country', 'month'], as_index=False)['hours_of_sunshine']
    .mean()
)

weather_df = weather_df.merge(avg_df, on=['country', 'month'], how='left')

weather_df.to_csv("weather_data.csv", index=False)

## AirBnB listings

folder_path = "listings/"
csv_files = glob.glob(os.path.join(folder_path, "*.csv"))

df_list = []

for file in csv_files:
    # Extract country and city from the filename
    filename = os.path.basename(file)
    country, city, _ = filename.split("_", 2)  # 'country_city_listings.csv' → ['country', 'city', 'listings.csv']

    # Read CSV
    df = pd.read_csv(file, on_bad_lines='skip')

    # Add columns for country and city
    df["country"] = country
    df["city"] = city

    # Collect the DataFrame
    df_list.append(df)

# Combine all into one
combined_df = pd.concat(df_list, ignore_index=True)

columns_to_keep = ['listing_id', 'listing_name', 'country', 'city', 'listing_type', 'room_type',
                   'currency', 'guests', 'bedrooms', 'cancellation_policy', 'rating_overall', 'ttm_revenue', 'ttm_avg_rate']
final_df = combined_df[columns_to_keep]

final_df.to_csv("listings_data.csv", index=False)

folder_path = "monthly/"
csv_files = glob.glob(os.path.join(folder_path, "*.csv"))

df_list = []

for file in csv_files:
    # Extract country and city from the filename
    filename = os.path.basename(file)
    country, city, _ = filename.split("_", 2)  # 'country_city_listings.csv' → ['country', 'city', 'listings.csv']

    # Read CSV
    df = pd.read_csv(file, on_bad_lines='skip')

    # Add columns for country and city
    df["country"] = country
    df["city"] = city

    # Collect the DataFrame
    df_list.append(df)

# Combine all into one
combined_df = pd.concat(df_list, ignore_index=True)

columns_to_keep = ['listing_id', 'country','city','date', 'vacant_days', 'reserved_days', 'length_of_stay_avg', 'occupancy', 'rate_avg', 'native_revenue', 'revenue']
final_df = combined_df[columns_to_keep]

final_df.loc[:, 'date'] = final_df['date'].str[:7] # keeps only year and month

final_df.to_csv("monthly_airbnb_data.csv", index=False)

df_listings = pd.read_csv("listings_data.csv")
df_monthly = pd.read_csv("monthly_airbnb_data.csv")
df_tourism = pd.read_csv("tourism_data.csv")
df_weather = pd.read_csv("weather_data.csv")

df_tourism["country"] = df_tourism["country"].str.lower()

df_tourism.to_csv("tourism_data.csv", index=False)

df_listings['bedrooms'] = df_listings['bedrooms'].dropna().astype(int)
df_listings['guests'] = df_listings['guests'].dropna().astype(int)

# Ensure listing_id column exists and matches type
df_listings["listing_id"] = df_listings["listing_id"].astype(str)
df_monthly["listing_id"] = df_monthly["listing_id"].astype(str)

# Keep only rows in monthly that have a matching listing_id
monthly_clean = df_monthly[df_monthly["listing_id"].isin(df_listings["listing_id"])]

# Save cleaned version
monthly_clean.to_csv("monthly_airbnb_data.csv", index=False)

df_listings.to_csv("listings_data.csv", index=False)

df_weather["country"] = df_weather["country"].str.lower()
df_weather.to_csv("weather_data.csv", index=False)

df_listings = df_listings[pd.to_numeric(df_listings['listing_id'], errors='coerce').notna()]
df_listings['listing_id'] = df_listings['listing_id'].astype(int)
df_listings.to_csv("listings_data.csv", index=False)

